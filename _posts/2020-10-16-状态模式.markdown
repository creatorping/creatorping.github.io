---
title: 状态模式
date: 2020-10-16 20:23:00 +0800
categories: [后端之路,设计模式]
tags: [设计模式]
---

## 介绍
菜鸟教程：[https://www.runoob.com/design-pattern/state-pattern.html](https://www.runoob.com/design-pattern/state-pattern.html)

意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。

主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。

何时使用：代码中包含大量与对象状态有关的条件语句。

如何解决：将各种具体的状态类抽象出来。

关键代码：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。

应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，'钟是抽象接口','钟A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。

优点： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。

缺点： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。

使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。

注意事项：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。

类图：

![image-20201016203053551](https://raw.githubusercontent.com/creatorping/picBed/master/image-20201016203053551.png)

## 实现
+ 一家糖果公司想完成一个自动糖果售货机的设计，给出如下状态转换图，请求帮忙实现项目。![image-20201016200255438](https://raw.githubusercontent.com/creatorping/picBed/master/image-20201016200255438.png)
+ 五个状态，NoQuarter,HasQuarter,Sold,SoldOut,Winner分别代表未投币，已投币，售出，售空，赢家。继承自同一个接口State。当一个状态退出时会自动调整售货机为下一个状态。
+ State实现了四个方法insertQuarter(),ejectQuarter(),turnCrank(),dispense().分别代表投币，退币，转动曲柄，发放糖果。

~~~java
public interface State {
		public void insertQuarter();
		public void ejectQuarter();
		public void turnCrank();
		public void dispense();
}
~~~

~~~java
public class NoQuarterState implements State{
	GumballMachine gumballmachine;
	public NoQuarterState(GumballMachine _gumballmachine){
		gumballmachine = _gumballmachine;
	}
	
	public void insertQuarter() {
		System.out.println("put into Quarter");
		gumballmachine.setState(gumballmachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("Sorry, no money");
	}
	public void turnCrank() {
		System.out.println("Sorry,please put into Quarter");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
}
~~~

~~~java
import java.util.Random;

public class HasQuarterState implements State{
	Random random = new Random(System.currentTimeMillis());
	GumballMachine gumballmachine;
	
	public HasQuarterState(GumballMachine _gumballmachine) {
		gumballmachine = _gumballmachine;
	}
	
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballmachine.setState(gumballmachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		int winner = random.nextInt(10);
		if((winner == 0)&&(gumballmachine.getCount()) >1){
			gumballmachine.setState(gumballmachine.getWinnerState());
		}
		else {
			gumballmachine.setState(gumballmachine.getSoldState());
		}
		
	}
	public void dispense() {
		System.out.println("No gumball dispense");
	}
}
~~~

~~~java
public class SoldState implements State{
	GumballMachine gumballmachine;
	
	public SoldState(GumballMachine _gumballmachine){
		gumballmachine = _gumballmachine;
	}
	
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you anther gumball");
	}
	public void dispense() {
		gumballmachine.releaseBall();
		if(gumballmachine.getCount() > 0) {
			gumballmachine.setState(gumballmachine.getNoQuarterState());
		}
		else {
			System.out.println("Oops, out of gumballs!");
			gumballmachine.setState(gumballmachine.getSoldOutState());
		}
	}
}
~~~

~~~java
public class SoldOutState implements State{
	GumballMachine gumballmachine;
	public SoldOutState(GumballMachine _gumballmachine) {
		gumballmachine = _gumballmachine;
	}
	
	public void insertQuarter() {
		System.out.println("Sorry, there no ball!");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, no money");
	}
	public void turnCrank() {
		System.out.println("Sorry, useless");
	}
	public void dispense() {
		System.out.println("Sorry, please wait");
	}
}
~~~

~~~java
public class WinnerState implements State{
	GumballMachine gumballmachine;
	public WinnerState(GumballMachine _gumballmachine) {
		this.gumballmachine = _gumballmachine;
	}
	public void insertQuarter() {
		System.out.println("error");
	}
	public void ejectQuarter() {
		System.out.println("error");
	}
	public void turnCrank() {
		System.out.println("error");
	}
	public void dispense() {
		System.out.println("You're a winner~~!");
		gumballmachine.releaseBall();
		if(gumballmachine.getCount() == 0) {
			gumballmachine.setState(gumballmachine.getSoldOutState());
		}
		else {
			gumballmachine.releaseBall();
			if(gumballmachine.getCount()>0) {
				gumballmachine.setState(gumballmachine.getNoQuarterState());
			}
			else {
				gumballmachine.setState(gumballmachine.getSoldOutState());
			}
		}
	}
}
~~~

+ 糖果机声明五个状态的实例，与状态类之间实现耦合。
~~~java
public class GumballMachine {
	State soldoutstate;
	State noquarterstate;
	State hasquarterstate;
	State soldstate;
	State winnerstate;
	
	State state = soldoutstate;
	int count = 0;
	public GumballMachine(int numbergumballs) {
		soldoutstate = new SoldOutState(this);
		noquarterstate = new NoQuarterState(this);
		hasquarterstate = new HasQuarterState(this);
		soldstate = new SoldState(this);
		winnerstate = new WinnerState(this);
		count = numbergumballs;
		if(numbergumballs > 0) {
			state = noquarterstate;
		}
	}
	public void insertQuarter() {
		state.insertQuarter();
	}
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
	}
	public void dispense() {
		state.dispense();
	}
	public void releaseBall() {
		System.out.println("A gumball comes rolling out the slot");
		if(count != 0) {
			count = count-1;
		}
	}
	public void setState(State _state) {
		this.state = _state;
	}
	public State getSoldOutState() {
		return this.soldoutstate;
	}
	public State getNoQuarterState() {
		return this.noquarterstate;
	}
	public State getHasQuarterState() {
		return this.hasquarterstate;
	}
	public State getSoldState() {
		return this.soldstate;
	}
	public State getWinnerState() {
		return this.winnerstate;
	}
	public int getCount() {
		return count;
	}
}
~~~

+ 测试代码
~~~java
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballmachine = new GumballMachine(5);
		
		System.out.println("gumballMachine");
		
		gumballmachine.insertQuarter();
		gumballmachine.turnCrank();
		gumballmachine.dispense();
		
		System.out.println("gumballMachine");
		
		gumballmachine.insertQuarter();
		gumballmachine.turnCrank();
		gumballmachine.dispense();
		gumballmachine.insertQuarter();
		gumballmachine.turnCrank();
		gumballmachine.dispense();
		
		System.out.println("gumballMachine");
	}
}
~~~